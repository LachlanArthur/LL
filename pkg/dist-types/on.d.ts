declare type ElementType = AudioScheduledSourceNode | AudioWorkletNode | ScriptProcessorNode | HTMLBodyElement | HTMLFrameSetElement | HTMLMarqueeElement | HTMLMediaElement | HTMLVideoElement | HTMLElement | Element | Document | OfflineAudioContext | BaseAudioContext | IDBOpenDBRequest | IDBRequest | SVGSVGElement | SVGElement | AbortSignal | Animation | ApplicationCache | AudioTrackList | BroadcastChannel | FileReader | IDBDatabase | IDBTransaction | MSInputMethodContext | MediaDevices | MediaQueryList | MediaStream | MediaStreamTrack | MessagePort | Notification | PaymentRequest | Performance | RTCDTMFSender | RTCDataChannel | RTCDtlsTransport | RTCDtmfSender | RTCIceGatherer | RTCIceTransport | RTCPeerConnection | RTCSrtpSdesTransport | ScreenOrientation | ServiceWorker | ServiceWorkerContainer | ServiceWorkerRegistration | SpeechRecognition | SpeechSynthesis | SpeechSynthesisUtterance | TextTrack | TextTrackCue | TextTrackList | VideoTrackList | WebSocket | Window | Worker | XMLHttpRequest | XMLHttpRequestEventTarget | EventTarget;
export interface DocumentEventMapExtra extends DocumentEventMap {
    'DOMContentLoaded': Event;
}
export declare type EventMapFor<T extends EventTarget> = T extends AudioScheduledSourceNode ? AudioScheduledSourceNodeEventMap : T extends AudioWorkletNode ? AudioWorkletNodeEventMap : T extends ScriptProcessorNode ? ScriptProcessorNodeEventMap : T extends HTMLBodyElement ? HTMLBodyElementEventMap : T extends HTMLFrameSetElement ? HTMLFrameSetElementEventMap : T extends HTMLMarqueeElement ? HTMLMarqueeElementEventMap : T extends HTMLMediaElement ? HTMLMediaElementEventMap : T extends HTMLVideoElement ? HTMLVideoElementEventMap : T extends HTMLElement ? HTMLElementEventMap : T extends Element ? ElementEventMap : T extends Document ? DocumentEventMapExtra : T extends OfflineAudioContext ? OfflineAudioContextEventMap : T extends BaseAudioContext ? BaseAudioContextEventMap : T extends IDBOpenDBRequest ? IDBOpenDBRequestEventMap : T extends IDBRequest ? IDBRequestEventMap : T extends SVGSVGElement ? SVGSVGElementEventMap : T extends SVGElement ? SVGElementEventMap : T extends AbortSignal ? AbortSignalEventMap : T extends Animation ? AnimationEventMap : T extends ApplicationCache ? ApplicationCacheEventMap : T extends AudioTrackList ? AudioTrackListEventMap : T extends BroadcastChannel ? BroadcastChannelEventMap : T extends FileReader ? FileReaderEventMap : T extends IDBDatabase ? IDBDatabaseEventMap : T extends IDBTransaction ? IDBTransactionEventMap : T extends MSInputMethodContext ? MSInputMethodContextEventMap : T extends MediaDevices ? MediaDevicesEventMap : T extends MediaQueryList ? MediaQueryListEventMap : T extends MediaStream ? MediaStreamEventMap : T extends MediaStreamTrack ? MediaStreamTrackEventMap : T extends MessagePort ? MessagePortEventMap : T extends Notification ? NotificationEventMap : T extends PaymentRequest ? PaymentRequestEventMap : T extends Performance ? PerformanceEventMap : T extends RTCDTMFSender ? RTCDTMFSenderEventMap : T extends RTCDataChannel ? RTCDataChannelEventMap : T extends RTCDtlsTransport ? RTCDtlsTransportEventMap : T extends RTCDtmfSender ? RTCDtmfSenderEventMap : T extends RTCIceGatherer ? RTCIceGathererEventMap : T extends RTCIceTransport ? RTCIceTransportEventMap : T extends RTCPeerConnection ? RTCPeerConnectionEventMap : T extends RTCSrtpSdesTransport ? RTCSrtpSdesTransportEventMap : T extends ScreenOrientation ? ScreenOrientationEventMap : T extends ServiceWorker ? ServiceWorkerEventMap : T extends ServiceWorkerContainer ? ServiceWorkerContainerEventMap : T extends ServiceWorkerRegistration ? ServiceWorkerRegistrationEventMap : T extends SpeechRecognition ? SpeechRecognitionEventMap : T extends SpeechSynthesis ? SpeechSynthesisEventMap : T extends SpeechSynthesisUtterance ? SpeechSynthesisUtteranceEventMap : T extends TextTrack ? TextTrackEventMap : T extends TextTrackCue ? TextTrackCueEventMap : T extends TextTrackList ? TextTrackListEventMap : T extends VideoTrackList ? VideoTrackListEventMap : T extends WebSocket ? WebSocketEventMap : T extends Window ? WindowEventMap : T extends Worker ? WorkerEventMap : T extends XMLHttpRequest ? XMLHttpRequestEventMap : T extends XMLHttpRequestEventTarget ? XMLHttpRequestEventTargetEventMap : {
    [eventName: string]: Event;
};
declare type MaybeArray<T> = T | Array<T>;
export declare function on<tObj extends ElementType, tEventMap extends EventMapFor<tObj>, tEventName extends Extract<keyof tEventMap, string>>(elements: MaybeArray<tObj | null>, events: MaybeArray<tEventName>, targetFilter?: string): <tEvent extends tEventMap[tEventName]>(listeners: MaybeArray<(this: tObj, event: tEvent) => void>, options?: boolean | AddEventListenerOptions | undefined) => void;
export {};
